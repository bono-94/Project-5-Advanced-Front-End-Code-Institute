{"ast":null,"code":"// import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\n// import axios from \"axios\";\n// import { axiosReq, axiosRes } from \"../api/axiosDefaults\";\n// import { useHistory } from \"react-router\";\n// import { removeTokenTimestamp, shouldRefreshToken } from \"../utils/utils\";\n\n// export const CurrentUserContext = createContext();\n// export const SetCurrentUserContext = createContext();\n\n// export const useCurrentUser = () => useContext(CurrentUserContext);\n// export const useSetCurrentUser = () => useContext(SetCurrentUserContext);\n\n// export const CurrentUserProvider = ({ children }) => {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const history = useHistory();\n\n//   const handleMount = async () => {\n//     try {\n//       const { data } = await axiosRes.get(\"dj-rest-auth/user/\");\n//       setCurrentUser(data);\n//     } catch (err) {\n//       // console.log(err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     handleMount();\n//   }, []);\n\n//   useMemo(() => {\n//     axiosReq.interceptors.request.use(\n//       async (config) => {\n//         if (shouldRefreshToken()) {\n//           try {\n//             await axios.post(\"/dj-rest-auth/token/refresh/\");\n//           } catch (err) {\n//             setCurrentUser((prevCurrentUser) => {\n//               if (prevCurrentUser) {\n//                 history.push(\"/signin\");\n//               }\n//               return null;\n//             });\n//             removeTokenTimestamp();\n//             return config;\n//           }\n//         }\n//         return config;\n//       },\n//       (err) => {\n//         return Promise.reject(err);\n//       }\n//     );\n\n//     axiosRes.interceptors.response.use(\n//       (response) => response,\n//       async (err) => {\n//         if (err.response?.status === 401) {\n//           try {\n//             await axios.post(\"/dj-rest-auth/token/refresh/\");\n//           } catch (err) {\n//             setCurrentUser((prevCurrentUser) => {\n//               if (prevCurrentUser) {\n//                 history.push(\"/signin\");\n//               }\n//               return null;\n//             });\n//             removeTokenTimestamp();\n//           }\n//           return axios(err.config);\n//         }\n//         return Promise.reject(err);\n//       }\n//     );\n//   }, [history]);\n\n//   return (\n//     <CurrentUserContext.Provider value={currentUser}>\n//       <SetCurrentUserContext.Provider value={setCurrentUser}>\n//         {children}\n//       </SetCurrentUserContext.Provider>\n//     </CurrentUserContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["/workspace/Project-5-Advanced-Front-End-Code-Institute/react-app/src/contexts/CurrentUserContext.js"],"sourcesContent":["// import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\n// import axios from \"axios\";\n// import { axiosReq, axiosRes } from \"../api/axiosDefaults\";\n// import { useHistory } from \"react-router\";\n// import { removeTokenTimestamp, shouldRefreshToken } from \"../utils/utils\";\n\n// export const CurrentUserContext = createContext();\n// export const SetCurrentUserContext = createContext();\n\n// export const useCurrentUser = () => useContext(CurrentUserContext);\n// export const useSetCurrentUser = () => useContext(SetCurrentUserContext);\n\n// export const CurrentUserProvider = ({ children }) => {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const history = useHistory();\n\n//   const handleMount = async () => {\n//     try {\n//       const { data } = await axiosRes.get(\"dj-rest-auth/user/\");\n//       setCurrentUser(data);\n//     } catch (err) {\n//       // console.log(err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     handleMount();\n//   }, []);\n\n//   useMemo(() => {\n//     axiosReq.interceptors.request.use(\n//       async (config) => {\n//         if (shouldRefreshToken()) {\n//           try {\n//             await axios.post(\"/dj-rest-auth/token/refresh/\");\n//           } catch (err) {\n//             setCurrentUser((prevCurrentUser) => {\n//               if (prevCurrentUser) {\n//                 history.push(\"/signin\");\n//               }\n//               return null;\n//             });\n//             removeTokenTimestamp();\n//             return config;\n//           }\n//         }\n//         return config;\n//       },\n//       (err) => {\n//         return Promise.reject(err);\n//       }\n//     );\n\n//     axiosRes.interceptors.response.use(\n//       (response) => response,\n//       async (err) => {\n//         if (err.response?.status === 401) {\n//           try {\n//             await axios.post(\"/dj-rest-auth/token/refresh/\");\n//           } catch (err) {\n//             setCurrentUser((prevCurrentUser) => {\n//               if (prevCurrentUser) {\n//                 history.push(\"/signin\");\n//               }\n//               return null;\n//             });\n//             removeTokenTimestamp();\n//           }\n//           return axios(err.config);\n//         }\n//         return Promise.reject(err);\n//       }\n//     );\n//   }, [history]);\n\n//   return (\n//     <CurrentUserContext.Provider value={currentUser}>\n//       <SetCurrentUserContext.Provider value={setCurrentUser}>\n//         {children}\n//       </SetCurrentUserContext.Provider>\n//     </CurrentUserContext.Provider>\n//   );\n// };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}